AWSTemplateFormatVersion: '2010-09-09'

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: SpiceStreamIGW

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/25
      MapPublicIpOnLaunch: true
      AvailabilityZone: "us-east-1a"

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.128/25
      MapPublicIpOnLaunch: true
      AvailabilityZone: "us-east-1b"

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/25
      MapPublicIpOnLaunch: false
      AvailabilityZone: "us-east-1a"

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.128/25
      MapPublicIpOnLaunch: false
      AvailabilityZone: "us-east-1b"

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: SpiceStreamRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref RouteTable

  SubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref RouteTable

  FrontendSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Allow HTTP, HTTPS, and SSH traffic
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  # BackendSecurityGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     VpcId: !Ref VPC
  #     GroupDescription: Allow traffic from ALB
  #     SecurityGroupIngress:
  #       - IpProtocol: tcp
  #         FromPort: 80
  #         ToPort: 80
  #         SourceSecurityGroupId: !Ref ALBSecurityGroup

  # DatabaseSecurityGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     VpcId: !Ref VPC
  #     GroupDescription: Allow traffic from backend
  #     SecurityGroupIngress:
  #       - IpProtocol: tcp
  #         FromPort: 3306
  #         ToPort: 3306
  #         SourceSecurityGroupId: !Ref BackendSecurityGroup

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      SecurityGroupIds:
        - !Ref FrontendSecurityGroup
      SubnetId: !Ref PublicSubnet1
      ImageId: ami-0ae8f15ae66fe8cda
      UserData:
        !Base64 |
          #!/bin/bash
          sudo yum update -y
          sudo yum install docker -y
          sudo service docker start
          sudo usermod -a -G docker ec2-user
          sudo docker pull evancestnick/spice-stream-frontend
          sudo docker run -d -p 80:80 evancestnick/spice-stream-frontend

#   ECSCluster:
#     Type: AWS::ECS::Cluster
#     Properties:
#       ClusterName: SpiceStreamCluster

#   ECSTaskDefinition:
#     Type: AWS::ECS::TaskDefinition
#     Properties:
#       Family: SpiceStreamTask
#       NetworkMode: awsvpc
#       RequiresCompatibilities:
#         - FARGATE
#       Cpu: "256"
#       Memory: "512"
#       ContainerDefinitions:
#         - Name: backend
#           Image: evancestnick/spice-stream-backend
#           PortMappings:
#             - ContainerPort: 80
#           Environment:
#             - Name: ASPNETCORE_ENVIRONMENT
#               Value: Production
#             - Name: ConnectionStrings__DefaultConnection
#               Value: !Sub 'server=${RDSInstance.Endpoint.Address};port=3306;database=spice_stream_db;user=${DBUser};password=${DBPassword};'
#           LogConfiguration:
#             LogDriver: awslogs
#             Options:
#               awslogs-group: /ecs/SpiceStream
#               awslogs-region: !Ref AWS::Region
#               awslogs-stream-prefix: ecs

#   ECSService:
#     Type: AWS::ECS::Service
#     Properties:
#       Cluster: !Ref ECSCluster
#       DesiredCount: 1
#       LaunchType: FARGATE
#       NetworkConfiguration:
#         AwsvpcConfiguration:
#           AssignPublicIp: ENABLED
#           SecurityGroups:
#             - !Ref BackendSecurityGroup
#           Subnets:
#             - !Ref PrivateSubnet1
#             - !Ref PrivateSubnet2
#       TaskDefinition: !Ref ECSTaskDefinition
#       LoadBalancers:
#         - TargetGroupArn: !Ref TargetGroup
#           ContainerName: backend
#           ContainerPort: 80

#   ALB:
#     Type: AWS::ElasticLoadBalancingV2::LoadBalancer
#     Properties:
#       Name: SpiceStreamALB
#       Subnets:
#         - !Ref PublicSubnet1
#         - !Ref PublicSubnet2
#       SecurityGroups:
#         - !Ref ALBSecurityGroup
#       Scheme: internet-facing

#   ALBSecurityGroup:
#     Type: AWS::EC2::SecurityGroup
#     Properties:
#       VpcId: !Ref VPC
#       GroupDescription: ALB security group
#       SecurityGroupIngress:
#         - IpProtocol: tcp
#           FromPort: 80
#           ToPort: 80
#           CidrIp: 0.0.0.0/0

#   TargetGroup:
#     Type: AWS::ElasticLoadBalancingV2::TargetGroup
#     Properties:
#       Name: SpiceStreamTG
#       VpcId: !Ref VPC
#       Port: 80
#       Protocol: HTTP
#       TargetType: ip
#       HealthCheckPath: /
#       Matcher:
#         HttpCode: 200-299

#   Listener:
#     Type: AWS::ElasticLoadBalancingV2::Listener
#     Properties:
#       DefaultActions:
#         - Type: forward
#           TargetGroupArn: !Ref TargetGroup
#       LoadBalancerArn: !Ref ALB
#       Port: 80
#       Protocol: HTTP

#   RDSInstance:
#     Type: AWS::RDS::DBInstance
#     Properties:
#       DBInstanceIdentifier: SpiceStreamDB
#       AllocatedStorage: "20"
#       DBInstanceClass: db.t3.micro
#       Engine: mysql
#       MasterUsername: !Ref DBUser
#       MasterUserPassword: !Ref DBPassword
#       VPCSecurityGroups:
#         - !Ref DatabaseSecurityGroup
#       DBSubnetGroupName: !Ref DBSubnetGroup
#       PubliclyAccessible: false

#   DBSubnetGroup:
#     Type: AWS::RDS::DBSubnetGroup
#     Properties:
#       DBSubnetGroupDescription: Subnets for RDS
#       SubnetIds:
#         - !Ref PrivateSubnet1
#         - !Ref PrivateSubnet2

#   Secret:
#     Type: AWS::SecretsManager::Secret
#     Properties:
#       Name: DBPassword
#       Description: Database password
#       SecretString: !Ref DBPassword

# Parameters:
#   DBUser:
#     Type: String
#     Default: admin
#   DBPassword:
#     Type: String
#     NoEcho: true